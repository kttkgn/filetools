# 网站架构设计文档

## 一、技术架构选择

### 1. 是否需要后端服务
需要后端服务，原因如下：
- 文件转换需要服务器处理
- 图片处理（压缩、裁剪、水印）需要服务器计算资源
- 需要存储临时文件
- 需要处理并发请求

### 2. 技术选型
前端：
- React.js（用户界面框架）
- Ant Design（UI组件库）
- Axios（HTTP请求）

后端：
- Node.js + Express（服务器框架）
- Sharp（图片处理库）
- Multer（文件上传处理）
- Redis（临时文件缓存）

## 二、功能模块设计

### 1. 文件转换模块
- 支持的文件格式：PDF、Word、Excel、TXT等
- 文件上传限制：单个文件最大50MB
- 转换队列管理
- 临时文件存储（24小时自动清理）

### 2. 图片处理模块
#### 2.1 格式转换
- 支持格式：JPG、PNG、WebP、GIF
- 批量处理：最多10张图片
- 保持原图质量

#### 2.2 图片压缩
- 压缩质量：60%-100%可调
- 支持批量压缩
- 显示压缩前后对比

#### 2.3 图片裁剪
- 自由裁剪
- 固定比例裁剪
- 自定义尺寸裁剪

#### 2.4 图片水印
- 文字水印
- 图片水印
- 水印位置：9个固定位置
- 透明度调节：0-100%

## 三、目录结构

```
project/
├── frontend/                # 前端代码
│   ├── public/             # 静态资源
│   │   ├── components/     # 组件
│   │   ├── pages/         # 页面
│   │   ├── services/      # API服务
│   │   └── utils/         # 工具函数
│   └── package.json
│
├── backend/                # 后端代码
│   ├── src/
│   │   ├── controllers/   # 控制器
│   │   ├── services/      # 业务逻辑
│   │   ├── utils/         # 工具函数
│   │   └── routes/        # 路由
│   ├── temp/              # 临时文件存储
│   └── package.json
│
└── README.md
```

## 四、API接口设计

### 1. 文件转换接口
```
POST /api/convert
- 请求：文件上传
- 响应：转换后的文件下载链接
```

### 2. 图片处理接口
```
POST /api/image/convert    # 格式转换
POST /api/image/compress   # 压缩
POST /api/image/crop       # 裁剪
POST /api/image/watermark  # 水印
- 请求：图片文件 + 处理参数
- 响应：处理后的图片下载链接
```

## 五、安全设计

1. 文件上传限制
   - 文件大小限制
   - 文件类型验证
   - 文件名安全处理

2. 临时文件管理
   - 定期清理
   - 访问权限控制
   - 文件命名随机化

3. 接口安全
   - 请求频率限制
   - 文件处理超时控制
   - 错误处理机制 